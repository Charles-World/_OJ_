//#include <iostream>
//#include <algorithm>
//#include <vector>

//	 牛牛举办了一次编程比赛, 参加比赛的有3*n个选手, 每个选手都有一个水平值a_i.现在要将这些选手进行组队, 一共组成n个队伍, 即每个队伍3人.牛牛发现队伍的水平值等于该队伍队员中第二高水平值。
//	 例如 :
//   一个队伍三个队员的水平值分别是3, 3, 3.那么队伍的水平值是3
//	 一个队伍三个队员的水平值分别是3, 2, 3.那么队伍的水平值是3
//	 一个队伍三个队员的水平值分别是1, 5, 2.那么队伍的水平值是2
//	 为了让比赛更有看点, 牛牛想安排队伍使所有队伍的水平值总和最大。
//	 如样例所示 :
//   如果牛牛把6个队员划分到两个队伍
//	 如果方案为 :
//   team1: {1, 2, 5}, team2 : {5, 5, 8}, 这时候水平值总和为7.
//   而如果方案为 :
//   team1 : {2, 5, 8}, team2 : {1, 5, 5}, 这时候水平值总和为10.
//   没有比总和为10更大的方案, 所以输出10

//队伍的水平值等于该队伍队员中第二高水平值，为了所有队伍的水平值总和最大的解法，也就是说每个队伍
//的第二个值是尽可能大的值,所以实际值把最大值放到最右边，最小是放到最左边
//本题的主要思路是贪心算法
//所以这里的贪心就是保证每组的第二个值取到能选择的最大值就可以，我们每次尽量取最大，但是最大的
//数不可能是中位数，所以退而求其次，取 每组中第二大的
//先进行升序排序，然后取下标为3n - 2，3n - 4 ，3n - 4...n + 2，n位置的元素累加即可，相当下标为[0, n - 1]的n个数
//前n个数是排序后最小的数，因为三个数中选中位数，所以肯定不能先前n个数，且它们要充当每组最小的数
//剩下的2个数据两个为一组，大的值做最右边的数，次大的做中间值，这里就是
//把这个次大的值加起来

//int main()
//{
//	int n = 0;
//	while (std::cin >> n)
//	{
//		long long LeSum = 0;
//		std::vector<int> Le;
//		Le.resize(3 * n);
//		for (int i = 0; i < (3 * n); ++i)
//		{
//			std::cin >> Le[i];
//		}
//		std::sort(Le.begin(), Le.end());
//		for (int i = n; i <= (3 * n - 2); i += 2)
//		{
//			LeSum += Le[i];
//		}
//		std::cout << LeSum << std::endl;
//	}
//}

//输入两个字符串，从第一字符串中删除第二个字符串中所有的字符。例如，输入”They are
//students.”和”aeiou”，则删除之后的第一个字符串变成”Thy r stdnts.”
//输入描述：
//每个测试输入包含2个字符串
//输出描述：
//输出删除后的字符串
//示例1 :
//输入
//They are students.aeiou
//输出
//Thy r stdnts


//将第二个字符串的字符都映射到一个hashtable数组中，用来判断一个字符在这个字符串
//判断一个字符在第二个字符串，不要使用删除，这样效率太低，因为每次删除都伴随数据挪动
//这里可以将不在字符添加到一个新字符串，最后返回新新字符串

#include <iostream>
#include <string>
#define N 256

int main()
{
	std::string s1, s2, s3;
	getline(std::cin, s1);
	getline(std::cin, s2);
	int HashTable[N] = { 0 };
	for (int i = 0; i < s2.size(); ++i)
	{
		HashTable[s2[i]]++;

	}
	for (int i = 0; i < s1.size(); ++i)
	{
		if (HashTable[i] == 0)
		{ 
			s3 += s1[i];
		}
	}
	std::cout << s3 << std::endl;

	return 0;
}